# FieldWorks flatpak build specification
#
# Copyright (c) 2021 SIL International. MIT License.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

app-id: org.sil.FieldWorks

# org.gnome.Platform provides some pieces that we would need to manually specify if we use org.freedesktop.Platform.
runtime: org.gnome.Platform
# Target a runtime that is most similar to Ubuntu 20.04, for which we can easily build and test on without flatpak.
runtime-version: "3.36"
sdk: org.gnome.Sdk
# Not sure if this may help get mono debugging working again:
# sdk-extensions:
#   - org.freedesktop.Sdk.Extension.mono5
#   - org.freedesktop.Sdk.Extension.dotnet

writable-sdk: true
command: fieldworks-flex
finish-args:
  - --socket=x11
  - --socket=fallback-x11
  - --socket=wayland
  - --share=ipc
  # FieldWorks can synchronize project data over the network with other users.
  - --share=network
  # FieldWorks allows playing sound files and playing and recording in audio writing systems.
  - --socket=pulseaudio
  # Users need to be able to import data. This may include restoring backup files or choosing photos for a
  # dictionary. A better approach may be to use Portals to receive permission for a specific file when the user
  # specfies it ( https://docs.flatpak.org/en/latest/sandbox-permissions.html#portals ), tho perhaps that may not
  # work well in cases where a user is merely linking to/referencing a file, not copying it into their project or
  # otherwise using it only one time.
  - --filesystem=home:ro
  # Data, including projects.
  - --filesystem=xdg-data/fieldworks:rw
  # Configuration and settings of FieldWorks and included components.
  - --filesystem=xdg-config/fieldworks:rw
  - --filesystem=xdg-data/SIL:rw
  - --filesystem=~/.mono/registry/CurrentUser/software/sil:rw
  # Default location to write a backup in the backup dialog.
  - --filesystem=xdg-documents/fieldworks/backups:create
  - --filesystem=xdg-documents/fieldworks:create
  # Users can create a launcher to a specific project by clicking File - Project Management - Create Shortcut on
  # Desktop.
  - --filesystem=xdg-desktop:rw
  # Directory for libpalaso GlobalMutex.
  - --filesystem=/var/lock:rw
  # xchm wants to write to files ~/.xchmXXXXXX and ~/.xchm or it shows errors it exit. So we need to either grant
  # home:rw, get xchm changed to not need to write files to the root of home, or switch to another chm viewer. Check
  # on a newer xchm version, too.
  - --filesystem=home:rw
  # TODO Because apt/deb FieldWorks 9 installations may have custom FEC data in /var/lib/fieldworks/{registry,SIL} ,
  # then instead of having FEC install to the flatpak "/var/lib/fieldworks/..." locations, have FEC install to some
  # other location (maybe /app/share/fieldworks-encoding-converters), have the flatpak access /var/lib/fieldworks
  # read-only, and migrate/copy the FEC config+data from preferable /var/lib/fieldworks/... if exists, and if not
  # then from /app/share/... .
  # Shared writing system and encoding converters data location used by FieldWorks Debian packages, that may have
  # user-created data. Be able to read from this location in order to migrate from it.
  - --filesystem=/var/lib/fieldworks:ro
  - --filesystem=xdg-run/dconf
  - --filesystem=xdg-config/dconf:ro
  - --env=GTK_IM_MODULE_FILE=/app/lib/gtk-2.0/2.10.0/immodules.cache

modules:
  - shared-modules/gtk2/gtk2.json
  - name: fieldworks
    buildsystem: simple
    build-options:
      env:
        PREFIX: '/app'
        PERL5LIB: '/app/perl-modules/lib/perl5'
        MONO_PREFIX: '/app'
        MONO_SILPKGDIR: '/app'
        NUGET_DEST: 'fw/packages'
        FW_ROOT_PATH: '/run/build/fieldworks/fw'
        MSBUILD_ARGS: '-verbosity:detailed'
        INSTALLATION_PREFIX: '/app'
        # The debian packaging sets RUNMODE=PACKAGING. i dont think it's important for what we need but it's worth a try to help.
        RUNMODE: 'PACKAGING'
        FW_PACKAGE_DEBUG: 'true'
    build-commands:
      - env; ls -al . fw fw/Downloads liblcm libcom; pwd

      # Extract nuget packages. May only be needed when using source from git, rather than tarball.
      # The 'type: archive', 'archive-type: zip' had some trouble working, so manually extract.
      - for package in *.nupkg; do mkdir -p "${NUGET_DEST}/$(basename "${package}" .nupkg)"; unzip "${package}" -d "${NUGET_DEST}/$(basename "${package}" .nupkg)" ;done
      - ls -al "${NUGET_DEST}"

      # Copy in localizations from fieldworks 9.0 tarball, until we can get them another way.
      # MANUAL: cp -a source-package/fw/Localizations fw/ && cp -a source-package/fw/Downloads/Crowdin.zip fw/Downloads/ &&  cp -a source-package/fw/Output fw/ &&  cp -a source-package/fw/DistFiles/Templates fw/DistFiles/ && cp -a source-package/fw/DistFiles/CommonLocalizations fw/DistFiles/ && cp -a 'source-package/fw/DistFiles/Language Explorer/Configuration' 'fw/DistFiles/Language Explorer/'
      - cp -a source-package/fw/Localizations fw/
      - cp -a source-package/fw/Downloads/Crowdin.zip fw/Downloads/
      - cp -a source-package/fw/Output fw/
      - cp -a source-package/fw/DistFiles/Templates fw/DistFiles/
      - cp -a source-package/fw/DistFiles/CommonLocalizations fw/DistFiles/
      - cp -a 'source-package/fw/DistFiles/Language Explorer/Configuration' 'fw/DistFiles/Language Explorer/'

      # Skip problem with localization that I'm still investigating.
      - perl -pi -e 's|([ \t&]*).*/t:localize-binaries.*|\1echo skipping localize-binaries|' fw/Makefile

      # MANUAL: export BUILD_ROOT=$FW_ROOT_PATH BUILD_TYPE=d BUILD_CONFIG=Debug disableDownloads=true ; export LcmLocalArtifactsDir="$BUILD_ROOT/../liblcm/artifacts/$BUILD_CONFIG" ; mkdir -p $LcmLocalArtifactsDir ; cd $FW_ROOT_PATH/Build ;  ${FW_ROOT_PATH}/Build/run-in-environ  msbuild /t:refreshTargets
      # MANUAL: export PLATFORM=x86_64 && cd $FW_ROOT_PATH/Build && ${FW_ROOT_PATH}/Build/run-in-environ  msbuild  '/t:remakefw' /property:config=$BUILD_CONFIG /property:Platform=$PLATFORM /property:packaging=yes "/p:OutputPath=${FW_ROOT_PATH}/Output/Debug"
      # LDFLAGS="$(/app/lib/fieldworks/bin/icu-config --ldflags) ${LDFLAGS}" CPPFLAGS="$(/app/lib/fieldworks/bin/icu-config --cppflags) ${CPPFLAGS}"
      - cd ${FW_ROOT_PATH} && ${FW_ROOT_PATH}/Build/run-in-environ make BUILD_TYPE=d BUILD_CONFIG=Debug disableDownloads=true build-package-for-flatpak
      - cd ${FW_ROOT_PATH} && perl -pi -e '/<runtime>/ and s/^/  <dllmap dll="libdl.so" target="libdl.so.2" \/>\n/' $(find -name SIL.LCModel.Core.dll.config)

      - cd ${FW_ROOT_PATH} && ${FW_ROOT_PATH}/Build/run-in-environ make BUILD_TYPE=d BUILD_CONFIG=Debug disableDownloads=true install-for-flatpak

      - mv -v /app/share/applications/fieldworks-applications.desktop /app/share/applications/org.sil.FieldWorks.desktop
      - perl -pi -e 's/fieldworks-flex.png/org.sil.FieldWorks.png/g' /app/share/applications/org.sil.FieldWorks.desktop
      - mv -v /app/share/icons/hicolor/128x128/apps/fieldworks-flex.png /app/share/icons/hicolor/128x128/apps/org.sil.FieldWorks.png
      - mv -v /app/share/icons/hicolor/64x64/apps/fieldworks-flex.png /app/share/icons/hicolor/64x64/apps/org.sil.FieldWorks.png

    sources:
      - type: git
        url: https://github.com/sillsdev/FieldWorks.git
        # branch: support/9.0
        # tag: FieldWorks9.0.16
        # For now build the latest on feature/flatpak.
        branch: feature/flatpak
        dest: fw
      - type: git
        url: https://github.com/sillsdev/liblcm.git
        # branch: develop
        tag: FieldWorks9.0.16
        commit: 8f04ab5b314e9fa4cfacd4c481b82bc1ee2d6a91
        dest: liblcm
      - type: git
        url: https://github.com/sillsdev/libcom.git
        branch: develop
        dest: libcom
      - type: git
        url: https://github.com/sillsdev/FwHelps.git
        branch: develop
        dest: fw/DistFiles/Helps
      - type: archive
        url: https://packages.sil.org/ubuntu/pool/main/f/fieldworks/fieldworks_9.0.17.119%2Bfocal1.tar.xz
        sha256: be2c572abaaaaa95aaac563777ad4d3642f9dda2517058a369a7b564ab944534
        dest: source-package

      # FW nuget dependencies
      # Preview updates via FieldWorks.git: git log -p -- Build/nuget-{common,linux}/packages.config
      # To regenerate input sources:
      # ./nuget-sources ~/fwrepo/fw/Build/nuget-linux/packages.config packages fieldworks-sources-nuget-linux.yml
      # ./nuget-sources ~/fwrepo/fw/Build/nuget-common/packages.config packages fieldworks-sources-nuget-common.yml
      - fieldworks-sources-nuget-common.yml
      - fieldworks-sources-nuget-linux.yml

      # FW dependencies
      # Find updates via FieldWorks.git with a command like: git log -p FieldWorks9.0.13..FieldWorks9.0.16 -- Build/mkall.targets
      # Manually apply changes by editing tc-inputs.yml.
      # Regenerate input sources:
      # ./tc-sources tc-inputs.yml fieldworks-sources-tc.yml
      - fieldworks-sources-tc.yml

    modules:
      - name: libboost
        buildsystem: simple
        build-options:
          prefix: /usr
        config-opts:
          - --prefix=/usr
        build-commands:
          - env; ls -al; pwd
          - ./bootstrap.sh
          # It installs to /usr/local unless I specify a prefix.
          - ./b2 install variant=release --prefix=/usr
        cleanup:
          # Remove module at the end of packaging to not ship it.
          # TODO Unless we use boost in the production code and need it at runtime. ?
          - '*'
        sources:
        - type: archive
          url: https://boostorg.jfrog.io/artifactory/main/release/1.71.0/source/boost_1_71_0.tar.bz2
          sha512: b7937d50c4512cf13cadd0ca829de36cf2cbc6fb788f45b1d4565ad0753e2b206c545125a5862016c2f16016f2e4a6b687928963b466fff17c3e0a4437142c20

      # Remove the libenchant-dev module if the enchant in org.gnome.Sdk is sufficient. Test it in FW first w/o this.
      # - name: libenchant-dev
      #   buildsystem: simple
      #   build-commands:
      #     - env; ls -al; pwd
      #     - for package in *.deb; do mkdir "${package}-dir" && (cd "${package}-dir" && ar x ../"${package}") && tar -v -C / -x -f "${package}-dir"/data.tar.xz ; done
      #   sources:
      #     - type: file
      #       url: http://archive.ubuntu.com/ubuntu/pool/universe/e/enchant/libenchant-dev_1.6.0-11.3build1_amd64.deb
      #       sha256: edfca92d3c6fb0f7237057b02175a6de55bccda581fb53bbc536de2bfd857cb0
      #     - type: file
      #       url: http://archive.ubuntu.com/ubuntu/pool/universe/e/enchant/libenchant1c2a_1.6.0-11.3build1_amd64.deb
      #       sha256: 61fcfff6f79c871350b1c2f674bdf6f1cc19e9e808687f7abb005cdfc19264a6
      #     - type: file
      #       url: http://archive.ubuntu.com/ubuntu/pool/main/s/scowl/hunspell-en-us_2018.04.16-1_all.deb
      #       sha256: 804a6097f0034eea0edf7cbf30d75adb881933064ab6d65515159dbc1c89aeb6
      #     - type: file
      #       url: http://archive.ubuntu.com/ubuntu/pool/main/d/dictionaries-common/dictionaries-common_1.28.1_all.deb
      #       sha256: 5828e8d6973125cb19968eb345e2b5e08d207f73dac09c42f1ed9e81ca251431
      #     - type: file
      #       url: http://archive.ubuntu.com/ubuntu/pool/main/a/aspell/libaspell15_0.60.8-1build1_amd64.deb
      #       sha256: e693bec4fad44a18b9855ee26fc5abbe0df5dabba97fcdd4f2675b5b0ccd3997
      #     - type: file
      #       url: http://archive.ubuntu.com/ubuntu/pool/main/h/hunspell/libhunspell-1.7-0_1.7.0-2build2_amd64.deb
      #       sha256: a8851da5816b31753f0682bb78d98c5d29ec7ef22cf14546876eb0e8f668f295

      - name: dbus-glib # for gecko
        sources:
          - type: git
            url: https://salsa.debian.org/debian/dbus-glib.git
            tag: debian/0.110-5
            commit: 722fc1041fc8d975774b17a6cff0ec260e666172

      - name: libxklavier-dev
        buildsystem: autotools
        sources:
          - type: git
            url: https://salsa.debian.org/gnome-team/libxklavier.git
            commit: 4cd9bfe37a52961270d588b37e617cbce8217e5a
            tag: debian/5.4-4
          - type: shell
            commands:
              - |
                for PATCH_FILE in $(cat debian/patches/series); do
                  patch -p1 -i debian/patches/${PATCH_FILE}
                done

      - name: libjbig0
        # TODO try omitting out libjbig0. Every reference to jbig at flathub is to compile something (eg imagemagic) --without-jbig
        buildsystem: simple
        build-commands:
          - env; ls -al; pwd
          - for package in *.deb; do mkdir "${package}-dir" && (cd "${package}-dir" && ar x ../"${package}") && tar -v -C / -x -f "${package}-dir"/data.tar.xz ; done
        sources:
          - type: file
            url: http://archive.ubuntu.com/ubuntu/pool/main/j/jbigkit/libjbig0_2.1-3.1build1_amd64.deb
            sha256: f19d3e72dad9a418ca71ef58ee94b258616abbdbab3d1c5e2ed98fb8f14622a8

      - name: gtkmm2.4
        config-opts:
          - --disable-documentation
        sources:
          - type: archive
            url: http://archive.ubuntu.com/ubuntu/pool/universe/g/gtkmm2.4/gtkmm2.4_2.24.5.orig.tar.xz
            sha256: 0680a53b7bf90b4e4bf444d1d89e6df41c777e0bacc96e9c09fc4dd2f5fe6b72
        modules:
          - name: atkmm1.6
            config-opts:
              - --disable-documentation
            sources:
              - type: archive
                url: http://archive.ubuntu.com/ubuntu/pool/main/a/atkmm1.6/atkmm1.6_2.28.0.orig.tar.xz
                sha256: 5d27b6a2f4c130bf0e6415683399175e245a305bd91d13b9bd33abde401a3a04
            modules:
              - name: glibmm2.4
                config-opts:
                  - --disable-documentation
                sources:
                  - type: archive
                    url: http://archive.ubuntu.com/ubuntu/pool/main/g/glibmm2.4/glibmm2.4_2.64.2.orig.tar.xz
                    sha256: bdd5e4ea879826784faf486ea23eb2d03c892fd5e0177ac416be7b8e12c404e6
                modules:
                  - name: libsigc++-2.0
                    config-opts:
                      - --disable-documentation
                    sources:
                      - type: archive
                        url: http://archive.ubuntu.com/ubuntu/pool/main/libs/libsigc++-2.0/libsigc++-2.0_2.10.2.orig.tar.xz
                        sha256: 9e4f93ed27bd2a0f60af3a007c6963eee2b126eff378a1c719ed8235dfcdf524
          - name: pangomm
            config-opts:
              - --disable-documentation
            sources:
              - type: archive
                url: http://archive.ubuntu.com/ubuntu/pool/main/p/pangomm/pangomm_2.42.0.orig.tar.xz
                sha256: 4befa6dc41ad72b7b8e7351d2525399daaab5cf9a89c3ab0ba65678801ff4db4
            modules:
              - name: cairomm
                config-opts:
                  - --disable-documentation
                sources:
                  - type: archive
                    url: http://archive.ubuntu.com/ubuntu/pool/main/c/cairomm/cairomm_1.12.2.orig.tar.gz
                    sha256: 45c47fd4d0aa77464a75cdca011143fea3ef795c4753f6e860057da5fb8bd599

      - name: wget
        buildsystem: autotools
        # build-options:
        #   prefix: /usr
        # config-opts:
        #   - --prefix=/usr
        cleanup:
          # Remove module at the end of packaging to not ship it.
          - '*'
        sources:
          - type: archive
            url: https://ftp.gnu.org/gnu/wget/wget-1.20.3.tar.gz
            sha512: e8b82b40e270296228094a78d47f81580bdbdea9e6b93fd61b37dccb39430aeb9bda5397dc53a31c952a61629383c7e2a8c8abf414c8a4dd369af6ecf2717e6c
          # - type: shell
          #   # Help directory structure so wget doesn't fail when making /usr/share/man/manN since /usr/share/man is a symlink to runtime/docs/man, which doesn't exist. Similar with /usr/share/info .
          #   commands:
          #     - mkdir -p /usr/share/runtime/docs/man
          #     - mkdir -p /usr/share/runtime/docs/info
      - name: mono5-sil-from-git-source
        post-install:
          - cert-sync /etc/ssl/certs/ca-certificates.crt
        sources:
          - type: git
            url: https://github.com/sillsdev/mono.git
            tag: sil/5.16.0.179
            commit: 76d08936cf7ab1384caf2c012e821f71b3b94b23
          - type: archive
            # Update URL by doing: cd .../path/to/mono-repo && .../determine-monolite-url
            url: https://download.mono-project.com/monolite/monolite-linux-1051600011-latest.tar.gz
            sha512: b48bb273f5a9107f9bb9795d47277aeaaeb458588a6e011676bb9a152b83759f305cf1031a5e74a62145854ef17026cb1aa20ea9adb5e6b15f275b9d6af585db
            dest: mcs/class/lib/monolite-linux/1051600011
        modules:
          - name: python-2.7
            # Build Python 2 without cleaning away parts that we still need, like shared-modules/python2.7 does.
            config-opts:
              - --enable-shared
              - --with-system-expat
              - --with-system-ffi
              - --enable-unicode=ucs4
            post-install:
              - chmod 644 ${FLATPAK_DEST}/lib/libpython2.7.so.1.0
            sources:
              - type: archive
                url: https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tar.xz
                sha256: b62c0e7937551d0cc02b8fd5cb0f544f9405bafc9a54d3808ed4594812edef43


      - name: gtk-sharp-from-source
        config-opts:
          - --disable-gtk-doc
          - --disable-man
        sources:
          - type: git
            url: https://github.com/sillsdev/gtk-sharp.git
            branch: develop
            commit: fcf1dd40d4892be309dd450bcda2026ddece4480
          - type: script
            commands:
              - NOCONFIGURE=1 ./bootstrap-2.12


      - name: mono5-sil-msbuild
        # It was challenging to build msbuild from source. And every other project appears to fetch binaries rather than build msbuild.
        # TODO this is only needed during development. install to /usr instead of /app so dont ship it.
        buildsystem: simple
        build-commands:
          # Extract opt/mono5-sil/* into /app/
          - for package in *.deb; do mkdir "${package}-dir" && (cd "${package}-dir" && ar x ../"${package}") && tar -C /app -x -f "${package}-dir"/data.tar.xz --strip-components=3 ./opt/mono5-sil; done
          # Same-character-count path to /app since some binary files are going to be modified too.
          - perl -pi -e 's#/opt/mono5-sil#/./././././app#g' /app/bin/*
        sources:
          - type: file
            url: http://linux.lsdev.sil.org/ubuntu/pool/main/m/mono5-sil-msbuild/mono5-sil-msbuild_15.8+xamarinxplat.2018.07.31.22.43-0xamarin5+ubuntu1804b1_all.deb
            sha256: 758274d8bc438f325fc5fc808c0482ab50eb2bdaf02f61747888e190760753de

      - name: libgdiplus5-sil-from-source
        build-options:
          prefix: /app
          env:
            MONO_PREFIX: /app
        config-opts:
          - --with-pango
        sources:
          - type: archive
            url: https://packages.sil.org/ubuntu/pool/main/libg/libgdiplus5-sil/libgdiplus5-sil_5.6.0.orig.tar.gz
            sha256: b6663bdf04acd2c3e218a71185f8c5a3e6189525ad3e71591bfbf69133c8937f
        modules:
          - name: giflib
            buildsystem: simple
            build-commands:
              # libgdiplus needs GifQuantizeBuffer
              - patch -i debian/patches/revert-GifQuantizeBuffer-remove-from-lib.patch
              # Skip building documentation
              - "echo >doc/Makefile all:"
              # Install into /app so it gets picked up by libgdiplus before another giflib that doesnt have GifQuantizeBuffer. Maybe I should adjust libgdiplus's libdir instead.
              - make PREFIX=/app
              - make PREFIX=/app install
            sources:
              - type: git
                url: https://salsa.debian.org/deiv-guest/giflib.git
                commit: de2120737dbbeb00728054232a21c6b03c1ae687

      - name: icu-fw
        buildsystem: simple
        build-commands:
          - env; ls -al; pwd
          # FW ICU should install to paths like /app/lib/fieldworks/lib/libicuuc.so .
          # The icu-fw package debian/rules file installs bin/* and sbin/* to icu-bin/ . The FieldWorks build expects icu-config to be here, such as in _init.mak.lnx and environ.
          - ./configure --prefix=/app/lib/fieldworks --bindir=/app/lib/fieldworks/icu-bin --sbindir=/app/lib/fieldworks/icu-bin
          - make
          - make install
        subdir: source
        sources:
          - type: archive
            url: https://packages.sil.org/ubuntu/pool/main/i/icu-fw/icu-fw_54.1.1.44.orig.tar.xz
            sha256: 324af10d4aaea7213d0c6f407e9edeb6c512345f636517521db5423e55e56c7c


      - name: fieldworks-enc-converters
        #(TODO apply/move/something) Note that trying to get fw FwCoreDlgs.csproj to find ECInterfaces.dll was a pain and wasn't solved by environment variables or msbuild properties or a .user file. I needed to change the hintpath from /usr/lib/fieldworks to /whatever, for it to be found. i could have also probably pre-copied it into Output/Release.
        buildsystem: autotools
        build-options:
          prepend-ld-library-path: /app/lib/fieldworks/lib
          env:
            FIELDWORKS: "1"
            PYTHON_VERSION: "2.7"
            EC_DOWNLOAD_NUGETEXE: "false"
            EC_DOWNLOAD_DEPS: "true"
            # I don't remember if I caused this, but even tho `pkg-config --libs python-2.7` gives '-L/app/lib -lpython2.7', we ended up using '-L/app/lib/python2.7 -lpython2.7' and failing to find -lpython2.7. Override.
            PYTHON_LDFLAGS: "-L/app/lib -lpython2.7"
        config-opts:
          - --prefix=/app
        sources:
          # - type: git
          #   url: https://github.com/silnrsi/encoding-converters-core.git
          #   # Using branch master
          #   # Note that some fixing may be needed to get a more recent master commit to build.
          #   commit: 255360a25864d33e7305574e721aa66aab330905
          - type: git
            url: https://github.com/marksvc/encoding-converters-core.git
            # branch task/flatpak
            commit: 23674ad47ce53539ee047665873991bff2fa32c2
          - type: shell
            # FieldWorks Encoding Converters expects a shared directory where multiple users and applications on the
            # same computer can write shared data to. This has been /var/lib/fieldworks when using FieldWorks as
            # installed by an apt/deb package. At compile and installation time, the Makefile.in REGROOT and REGKEY
            # values are used, destination directories are created with permissions, and some initial files are
            # copied in. ECDriver.cpp picks up REGROOT. Util.cs expects the folder specified (/var/lib/fieldworks) to
            # match REGROOT. It looks like some things (like src/AppDataMover/Program.cs) will have trouble if the
            # directory doesn't exist or can't be written to. Tho it looks like AppDataMover is only used in Windows,
            # not Linux. We probably can't just switch the C# and C++ programs to use XDG_DATA_HOME, because although
            # they could write to it, they wouldn't have their initial files. And we can't just change the
            # Makefile.in to use XDG_DATA_HOME or similar because it can't install to a location like /home/foo.
            # Using this solution at present: Let Makefile.in copy the initial files to /var/lib/fieldworks. On FW
            # first-run, copy those initial files into XDG_DATA_HOME. Have C# read+write the files there in
            # XDG_DATA_HOME.
            commands:
              - |
                set -xueo pipefail
                # Adjust prefix
                # Note: EncCnvtrs/AutoConfigDialog.cs wants to find a help file in a path specified by the RootDir
                # registry key, but it doesn't look like that help file is even being installed for Linux. So it may
                # not matter what the RootDir registry key value is set to, but set it to /app/lib/fieldworks in case.
                perl -pi -e 's|/usr|/app|g' values.xml
                perl -pi -e 's|/usr/lib/fieldworks/icu-bin/icu-config|/app/lib/fieldworks/icu-bin/icu-config|' Makefile.in
          - type: file
            url: https://api.nuget.org/v3-flatcontainer/Geckofx45.64.Linux/45.0.21/Geckofx45.64.Linux.45.0.21.nupkg
            sha512: d34f7175793bdfc4dcfa0b404bf7d6f2a27ba29389623a23c4d6383281fedf7f8014474775f4321af21ad9eab2817e5309934b81b918296fb518c23064272dfe
            dest: nuget-sources/
          - type: file
            url: https://api.nuget.org/v3-flatcontainer/Geckofx45.32.Linux/45.0.21/Geckofx45.32.Linux.45.0.21.nupkg
            sha512: 677c1dea32bd8631e859a7ddb2e72971a5db5561e9bc3ddced9a5bd451395f78719d3001b1cea908025707bb34175ecbc698c9ca965a44535bb4e9c83687832f
            dest: nuget-sources/
          - type: file
            url: https://api.nuget.org/v3-flatcontainer/NUnit/2.6.4/NUnit.2.6.4.nupkg
            sha512: e0510c05364d512d810d8bc5741462cb8eeef06b45101f81106f5489fd9f9987d07050320d4306c41c9bc76fe186735a8e3544be0b496dc416617cf0bdb99600
            dest: nuget-sources/
          - type: file
            url: https://dist.nuget.org/win-x86-commandline/v3.4.4/nuget.exe
            sha512: 3b404655c39cfc39334c8437ff2c7d6007e23262daa7bb34863fdd6f2e7da9a89ab97176a52b1e8a99327fde3e9decc29c450664492af73680f5a715a72aacf3
            dest: build/

          # Use local nuget packages
          - type: shell
            commands:
              - |
                tee nuget.config <<< '<?xml version="1.0" encoding="utf-8"?>
                <configuration>
                  <packageSources>
                    <add key="LocalNugetPackages" value="'$(pwd)/nuget-sources'" />
                  </packageSources>
                  <disabledPackageSources>
                    <add key="nuget.org" value="true" />
                  </disabledPackageSources>
                </configuration>'
        modules:
          - name: libteckit-dev
            sources:
              - type: archive
                url: https://packages.sil.org/ubuntu/pool/main/t/teckit/teckit_2.5.10+20.04.orig.tar.gz
                sha256: 498d6331bc25853c86f6ae9afeec178192ef91f8b3d539e7593b09b079801ed0

      # Turning off Flexbridge for now until sort out build problems
      # - name: flexbridge
      #   buildsystem: simple
      #   build-options:
      #     # TODO trying prefix here to hopefully land fb in the right place.
      #     prefix: /app
      #     env:
      #       PREFIX: /app
      #       # TODO Probably remove perl5lib?
      #       PERL5LIB: /app/perl-modules/lib/perl5
      #       MONO_PREFIX: /app
      #       MONO_SILPKGDIR: /app
      #       CONFIGURATION: Debug
      #   build-commands:
      #     - env; ls -al; find; pwd
      #     - which mono
      #     - mono --version
      #     - cd nuget-specific && for package in *.nupkg; do mkdir -p "../packages/$(basename "${package}" .nupkg)"; unzip "${package}" -d "../packages//$(basename "${package}" .nupkg)" ;done
      #     - ls -al packages
      #     - cp -va source-tarball/DistFiles/localizations DistFiles/
      #     # - touch fetch_l10ns # TODO These l10ns will need downloaded ahead of time
      #     # - make release_build && make install
      #     # Place gitversion.properties in each project ahead of time, lest error : FileNotFoundException: Could not find file "/run/build/flexbridge/src/LibTriboroughBridge-ChorusPlugin/obj/gitversion.json"
      #     # - |
      #     #   tee gitversion.properties <<< 'BuildVersion=1.2.3.0'
      #     #   for project in $(find src -name \*.csproj); do
      #     #     objDir="$(dirname "$project")"/obj
      #     #     mkdir -vp "${objDir}"
      #     #     cp -va gitversion.properties "${objDir}"
      #     #   done
      #     # - perl -pi -e 's#<Target Name="VersionNumbers" .*<\/Target>#<Target Name="VersionNumbers" DependsOnTargets="RestoreBuildTasks;GetVersion">    <WriteLinesToFile File="$(RootDir)/gitversion.properties" Overwrite="true"      Lines="BuildVersion=$(GitVersion_SemVer).$(BUILD_NUMBER)"      Condition="$(GetVersion)"/>    <Exec Command='for project in $(find src -name \*.csproj); do              objDir="$(dirname "$project")"/obj              mkdir -vp "\${objDir}"              cp -va gitversion.properties "\${objDir}"            done' WorkingDirectory="$(RootDir)" />  </Target>#s' build/FLExBridge.proj

      #     # <Target Name="VersionNumbers" DependsOnTargets="RestoreBuildTasks;GetVersion">
      #     #   <WriteLinesToFile File="$(RootDir)/gitversion.properties" Overwrite="true"
      #     #     Lines="BuildVersion=$(GitVersion_SemVer).$(BUILD_NUMBER)"
      #     #     Condition="$(GetVersion)"/>
      #     #   <Exec Command='for project in $(find src -name \*.csproj); do
      #     #             objDir="$(dirname "$project")"/obj
      #     #             mkdir -vp "${objDir}"
      #     #             cp -va gitversion.properties "${objDir}"
      #     #           done' WorkingDirectory="$(RootDir)" />
      #     # </Target>
      #     # - for objDir in $(find -name obj); do cp -va gitversion.properties "${objDir}";done

      #     - echo DEBUG1
      #     - msbuild /t:DownloadDependencies build/FLExBridge.proj
      #     - echo DEBUG2

      #     # TODO The version information could still be extracted with something like dotnet running GitVersion.CommandLine; see https://github.com/sillsdev/flexbridge/issues/318 .
      #     - cd build && msbuild FLExBridge.proj -p:Configuration=Debug -p:DisableGitVersionTask=true -p:GitVersion_SemVer=1.2.3 -p:Version=1.2.3 -p:WriteVersionInfoToBuildLog=false
      #     - cp -va flexbridge output/Debug/
      #     # TODO don't try to install  Mercurial-x86_64.zip until it's available.
      #     #   Look for Mercurial in the nuget package SIL.Chorus.Mercurial.
      #     - perl -ni -e 'print unless /Mercurial-/' Makefile
      #     # TODO don't try to install Chorus_Help.chm until it's available.
      #     #   Probably need to do it how the Chorus git repo downloads it in the DownloadDependencies target in Chorus.proj.
      #     - perl -ni -e 'print unless /Chorus_Help.chm/' Makefile
      #     # TODO don't try to install localizations until available
      #     - perl -ni -e 'print unless /localizations/' Makefile
      #     - make install-core
      #     # TODO unzip mercurial once have it. something like:
      #     # - |
      #     #   set -xueo pipefail
      #     #   cd /app/lib/flexbridge
      #     #   unzip Mercurial-x86_64.zip
      #     #   chmod +x Mercurial/hg
      #     #   # Remove any existing fixutf8 extensions with potentially problematic paths
      #     #   perl -ni -e 'print unless /^fixutf8/' Mercurial/mercurial.ini
      #     #   echo "fixutf8=/app/lib/flexbridge/MercurialExtensions/fixutf8/fixutf8.py" >> Mercurial/mercurial.ini
      #   sources:
      #     - type: git
      #       url: https://github.com/sillsdev/flexbridge.git
      #       # branch: develop
      #       # branch: feature/nuget
      #       # TODO temporarily using task/gv until merged into feature/nuget.
      #       #branch: task/gv
      #       #branch: task/flatpak
      #       # branch: hack-nuget-build
      #       # commit: f1117e3ad45502dd527c465f9862923e700e5a29
      #       branch: develop
      #     # TODO Not rely on tarball for localizations
      #     - type: archive
      #       url: https://packages.sil.org/ubuntu/pool/main/f/flexbridge/flexbridge_3.0.1+166.orig.tar.xz
      #       sha256: 31b4389195bf29ddac2d739dda91a21eec47f7b5307de50b78a003a890938ace
      #       dest: source-tarball
      #     - type: file
      #       url: https://dist.nuget.org/win-x86-commandline/v5.9.0/nuget.exe
      #       sha512: 980b62387ce9540eff0d49ef6dd5b4da121a8648646a465bc6445534e9ec0d7605483fad933b26f9b0b3797db4d4b1ec82ed354b3daf13e1dcc0818292815dca
      #       dest: build/
      #     # These nuget packages are installed by build/FLExBridge.proj. Check on current packages and versions needed with: grep NuGetCommand build/FLExBridge.proj
      #     - flexbridge-sources-nuget-specific.yml

      #     # Use local nuget packages
      #     - type: shell
      #       commands:
      #         - |
      #           tee nuget.config <<< '<?xml version="1.0" encoding="utf-8"?>
      #           <configuration>
      #             <packageSources>
      #               <add key="LocalNugetPackages" value="'$(pwd)/nuget-sources'" />
      #             </packageSources>
      #             <disabledPackageSources>
      #               <add key="nuget.org" value="true" />
      #             </disabledPackageSources>
      #           </configuration>'
      #     # Regenerate: Set flexbridge git dir to newer code. Then run: ~/code/flatpak-builder-tools/dotnet/flatpak-dotnet-generator.py flexbridge-sources-nuget.json $(find $HOME/fwrepo/flexbridge -name \*.csproj)
      #     - flexbridge-sources-nuget.json

      #     # Dependencies specified from FLExBridge.dep
      #     # Determine what is needed by running in the flexbridge repo: msbuild /t:DownloadDependencies build/FLExBridge.proj && cat build/FLExBridge.files
      #     - flexbridge-sources-deps.yml

      #     # - type: file
      #     #   path: fb-gitversion.py
      #     # - type: shell
      #     #   commands:
      #     #     - ./fb-gitversion.py
      #     #     - cat build/FLExBridge.proj
      #     # - type: file
      #     #   path: patches/flexbridge/gitversion.json

      #     # - type: shell
      #     #   commands:
      #     #     - |
      #     #       perl -pi -e 's#install: fetch_l10ns#install:#' Makefile

      - name: xchm
        # Help file viewer
        sources:
          - type: git
            url: https://github.com/rzvncj/xCHM
            # Version used in Ubuntu 20.04.
            tag: "1.31"
            commit: e983d11fd546c961501f736b2c6f93178c92fa97
        modules:
          - name: chmlib
            sources:
              - type: git
                url: https://github.com/jedwing/CHMLib
                # Latest commit, from 2009-07-03.
                commit: 2bef8d063ec7d88a8de6fd9f0513ea42ac0fa21f
              - type: script
                commands:
                  - autoreconf --install
          - name: wxWidgets
            sources:
              - type: git
                url: https://github.com/wxWidgets/wxWidgets
                # Version used in Ubuntu 20.04.
                tag: v3.0.4
                commit: 721d62adde3f8ba8704a9cf56efeb050f652dfbf
